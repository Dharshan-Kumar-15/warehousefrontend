{"ast":null,"code":"import { PLATFORM_ID, signal } from '@angular/core';\nimport { jwtDecode } from 'jwt-decode';\nimport { tap } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, platformId) {\n      this.http = http;\n      this.router = router;\n      this.platformId = platformId;\n      this.currentUserSubject = signal(null);\n      this.currentUser = this.currentUserSubject.asReadonly();\n      this.isLoading = signal(false);\n      this.apiUrl = 'http://localhost:8080/auth';\n      this.initalizeUser();\n    }\n    //LocalStorage\n    initalizeUser() {\n      if (this.isBrowser()) {\n        const user = localStorage.getItem('currentUser');\n        if (user) {\n          try {\n            this.currentUserSubject.set(JSON.parse(user));\n          } catch (e) {\n            console.error('Failed to parse user from localStorage', e);\n            this.clearStorage();\n          }\n        }\n      }\n    }\n    //Localstorage\n    isBrowser() {\n      return isPlatformBrowser(this.platformId);\n    }\n    //clear Storage\n    clearStorage() {\n      if (this.isBrowser()) {\n        localStorage.removeItem('currentUser');\n      }\n      this.currentUserSubject.set(null);\n    }\n    //Login\n    login(username, password) {\n      this.isLoading.set(true);\n      return this.http.post(this.apiUrl + '/signin', {\n        username,\n        password\n      }).pipe(tap({\n        next: response => {\n          console.log('Login response:', response);\n          const token1 = response.token;\n          const decoded1 = jwtDecode(token1);\n          console.log('from auth service:' + decoded1);\n          const userId1 = decoded1.roles;\n          console.log(\"from auth: \" + userId1);\n          if (this.isBrowser()) {\n            localStorage.setItem('currentUser', JSON.stringify(response));\n          }\n          this.currentUserSubject.set(response);\n          this.isLoading.set(false);\n        },\n        error: () => this.isLoading.set(false)\n      }) //tap closing\n      ); //pipe closing\n    }\n    //Register\n    register(username, email, password, roles) {\n      this.isLoading.set(true);\n      return this.http.post(this.apiUrl + \"/signup\", {\n        username,\n        email,\n        password,\n        roles\n      }).pipe(tap({\n        next: () => this.isLoading.set(false),\n        error: () => this.isLoading.set(false)\n      }) //tap\n      ); //pipe\n    }\n    getUserId() {\n      const token = this.currentUser()?.token;\n      const decoded = jwtDecode(token);\n      const userId = decoded.user_id;\n      return userId;\n    }\n    //logout\n    logout() {\n      this.clearStorage();\n      this.router.navigate(['auth']);\n    }\n    //Get Token\n    getToken() {\n      return this.currentUser()?.token || null;\n    }\n    getUserRole() {\n      // console.log('roles'+this.currentUser()?.roles);\n      // return this.currentUser()?.roles ||null;\n      const user = this.currentUser();\n      if (!user || !user.roles) return null;\n      // Handle different role formats and return the first role\n      if (Array.isArray(user.roles) && user.roles.length > 0) {\n        return user.roles[0]; // Return first role from array\n      } else if (typeof user.roles === 'string') {\n        // If it's a comma-separated string, return the first one\n        const roles = user.roles.split(',').map(r => r.trim());\n        return roles.length > 0 ? roles[0] : null;\n      }\n      // if (user.token) {\n      //   try {\n      //     const payload = JSON.parse(atob(user.token.split('.')[1]));\n      //     console.log('Token payload:', payload);\n      //     if (payload.roles) {\n      //       return this.extractFirstRole(payload.roles);\n      //     }\n      //     if (payload.authorities) {\n      //       return this.extractFirstRole(payload.authorities);\n      //     }\n      //     if (payload.scope) {\n      //       return this.extractFirstRole(payload.scope);\n      //     }\n      //   } catch (e) {\n      //     console.error('Error parsing JWT token:', e);\n      //   }\n      // }\n      return null;\n    }\n    //  private extractFirstRole(roles: any): string | null {\n    //   if (Array.isArray(roles)) {\n    //     return roles.length > 0 ? roles[0] : null;\n    //   }\n    //   if (typeof roles === 'string') {\n    //     const roleArray = roles.split(',').map(r => r.trim());\n    //     return roleArray.length > 0 ? roleArray[0] : null;\n    //   }\n    //   if (roles && typeof roles === 'object') {\n    //     return roles.name || roles.authority || null;\n    //   }\n    //   return null;\n    // }\n    hasRole(role) {\n      return this.getUserRole()?.includes(role) || false;\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(PLATFORM_ID));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}