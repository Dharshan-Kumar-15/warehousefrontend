{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { inject } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { SpinnerComponent } from '../../../Others/spinner/spinner.component';\nimport { ApiService } from '../../../../Services/ApiService/api.service';\nimport { RouterLink } from '@angular/router';\nimport { AuthService } from '../../../../Services/AuthService/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/forms\";\nfunction TransportStatusComponent_For_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", status_r1);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(status_r1);\n  }\n}\nfunction TransportStatusComponent_Conditional_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \"Status is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransportStatusComponent_Conditional_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-spinner\");\n  }\n}\nfunction TransportStatusComponent_Conditional_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \" Update Status \");\n  }\n}\nexport let TransportStatusComponent = /*#__PURE__*/(() => {\n  class TransportStatusComponent {\n    constructor(route, router, toastr) {\n      this.route = route;\n      this.router = router;\n      this.toastr = toastr;\n      this.fb = inject(FormBuilder);\n      this.apiService = inject(ApiService);\n      this.authService = inject(AuthService);\n      this.statusForm = this.fb.group({\n        status: ['', Validators.required]\n      });\n      this.currentStatus = '';\n      this.statusOptions = ['PENDING', 'IN_TRANSIT', 'CANCELLED', 'PREPARING', 'DELIVERED'];\n      this.isLoading = false;\n    }\n    ngOnInit() {\n      this.route.params.subscribe(params => {\n        this.shipmentId = +params['id'];\n        this.loadShipments(this.shipmentId);\n      });\n    }\n    loadShipments(id) {\n      this.isLoading = true;\n      this.apiService.getTransportId(id).subscribe({\n        next: shipment => {\n          this.currentStatus = shipment.status;\n          this.statusForm.patchValue({\n            status: shipment.status\n          });\n          this.isLoading = false;\n        },\n        error: err => {\n          this.toastr.error(err.error?.message || 'Failed to load shipment');\n          this.isLoading = false;\n        }\n      });\n    }\n    onSubmit() {\n      this.isLoading = true;\n      const newStatus = this.statusForm.value.status;\n      console.log('shipstatus:', newStatus, this.shipmentId);\n      this.apiService.updateStatusTransport(this.shipmentId, newStatus).subscribe({\n        next: operation => {\n          console.log(operation.status);\n          this.toastr.success('Status Updated Successfully');\n          this.router.navigate(['/transport/shipments']);\n        },\n        error: err => {\n          this.toastr.error('Failed to Update Status');\n          this.isLoading = false;\n        }\n      });\n      if (this.statusForm.invalid) {\n        return;\n      }\n    }\n    getStatusBadgeclass(status) {\n      switch (status) {\n        case 'PENDING':\n          return 'badge bg-warning text-dark';\n        case 'IN_TRANSIT':\n          return 'badge bg-info text-dark';\n        case 'DELIVERED':\n          return 'badge bg-success';\n        case 'CANCELLED':\n          return 'badge bg-danger';\n        case 'PREPARING':\n          return 'badge bg-primary';\n        default:\n          return 'badge bg-secondary';\n      }\n    }\n    logout() {\n      this.authService.logout();\n    }\n    static {\n      this.ɵfac = function TransportStatusComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || TransportStatusComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.ToastrService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TransportStatusComponent,\n        selectors: [[\"app-transport-status\"]],\n        decls: 40,\n        vars: 9,\n        consts: [[1, \"navbar\", \"navbar-expand-lg\", \"navbar-dark\", \"bg-dark\"], [1, \"container\"], [\"routerLink\", \"/\", 1, \"navbar-brand\"], [\"id\", \"navbarNav\", 1, \"collapse\", \"navbar-collapse\"], [1, \"navbar-nav\"], [1, \"nav-item\"], [\"routerLink\", \"/transport/shipments\", 1, \"nav-link\", \"active\"], [\"routerLink\", \"/transport/shipments\", 1, \"nav-link\", \"text-white\"], [\"id\", \"navbar-item\", 1, \"navbar-nav\"], [1, \"nav-link\", \"btn-primary\", \"btn\", 3, \"click\"], [1, \"container\", \"mt-4\"], [1, \"card\", \"mb-4\"], [1, \"card-body\"], [1, \"card-title\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"mb-3\"], [\"for\", \"status\", 1, \"form-label\"], [\"id\", \"status\", \"formControlName\", \"status\", 1, \"form-select\"], [\"value\", \"\"], [3, \"value\"], [1, \"text-danger\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"me-2\", 3, \"disabled\"], [\"type\", \"button\", \"routerLink\", \"/transport/shipments\", 1, \"btn\", \"btn-secondary\"]],\n        template: function TransportStatusComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"a\", 2);\n            i0.ɵɵtext(3, \"Inventory Management\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"div\", 3)(5, \"ul\", 4)(6, \"li\", 5)(7, \"a\", 6);\n            i0.ɵɵtext(8, \"Home\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(9, \"li\", 5)(10, \"a\", 7);\n            i0.ɵɵtext(11, \"Shipments\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(12, \"ul\", 8)(13, \"li\", 5)(14, \"a\", 9);\n            i0.ɵɵlistener(\"click\", function TransportStatusComponent_Template_a_click_14_listener() {\n              return ctx.logout();\n            });\n            i0.ɵɵtext(15, \"Logout\");\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(16, \"div\", 10)(17, \"h2\");\n            i0.ɵɵtext(18, \"Update Shipment Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"div\", 11)(20, \"div\", 12)(21, \"h5\", 13);\n            i0.ɵɵtext(22, \"Current Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(23, \"span\");\n            i0.ɵɵtext(24);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(25, \"form\", 14);\n            i0.ɵɵlistener(\"ngSubmit\", function TransportStatusComponent_Template_form_ngSubmit_25_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(26, \"div\", 15)(27, \"label\", 16);\n            i0.ɵɵtext(28, \"New Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(29, \"select\", 17)(30, \"option\", 18);\n            i0.ɵɵtext(31, \"Select a status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵrepeaterCreate(32, TransportStatusComponent_For_33_Template, 2, 2, \"option\", 19, i0.ɵɵrepeaterTrackByIdentity);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(34, TransportStatusComponent_Conditional_34_Template, 2, 0, \"div\", 20);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(35, \"button\", 21);\n            i0.ɵɵtemplate(36, TransportStatusComponent_Conditional_36_Template, 1, 0, \"app-spinner\")(37, TransportStatusComponent_Conditional_37_Template, 1, 0);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(38, \"button\", 22);\n            i0.ɵɵtext(39, \" Cancel \");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            let tmp_3_0;\n            let tmp_5_0;\n            i0.ɵɵadvance(23);\n            i0.ɵɵclassMap(ctx.getStatusBadgeclass(ctx.currentStatus));\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.currentStatus, \" \");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"formGroup\", ctx.statusForm);\n            i0.ɵɵadvance(4);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_3_0 = ctx.statusForm.get(\"status\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.statusForm.get(\"status\")) == null ? null : tmp_3_0.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵrepeater(ctx.statusOptions);\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(((tmp_5_0 = ctx.statusForm.get(\"status\")) == null ? null : tmp_5_0.invalid) && ((tmp_5_0 = ctx.statusForm.get(\"status\")) == null ? null : tmp_5_0.touched) ? 34 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.statusForm.invalid || ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵconditional(ctx.isLoading ? 36 : 37);\n          }\n        },\n        dependencies: [CommonModule, ReactiveFormsModule, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, SpinnerComponent, RouterLink],\n        encapsulation: 2\n      });\n    }\n  }\n  return TransportStatusComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}