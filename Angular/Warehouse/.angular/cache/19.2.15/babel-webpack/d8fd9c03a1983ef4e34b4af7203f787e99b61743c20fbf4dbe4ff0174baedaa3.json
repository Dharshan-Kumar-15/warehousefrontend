{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { inject } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { SpinnerComponent } from '../../../Others/spinner/spinner.component';\nimport { ApiService } from '../../../../Services/ApiService/api.service';\nimport { RouterLink } from '@angular/router';\nimport { AuthService } from '../../../../Services/AuthService/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _forTrack0 = ($index, $item) => $item.order_id;\nfunction TransportFormComponent_Conditional_26_For_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const order_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", order_r1.order_id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\"Order \", order_r1.order_id, \" - \", order_r1.buyer.name, \"\");\n  }\n}\nfunction TransportFormComponent_Conditional_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵrepeaterCreate(0, TransportFormComponent_Conditional_26_For_1_Template, 2, 3, \"option\", 19, _forTrack0);\n  }\n  if (rf & 2) {\n    i0.ɵɵrepeater(ctx);\n  }\n}\nfunction TransportFormComponent_Conditional_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"Order is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransportFormComponent_For_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const method_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", method_r2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(method_r2);\n  }\n}\nfunction TransportFormComponent_Conditional_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"Method is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransportFormComponent_For_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", status_r3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(status_r3);\n  }\n}\nfunction TransportFormComponent_Conditional_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"Method is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransportFormComponent_Conditional_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-spinner\");\n  }\n}\nfunction TransportFormComponent_Conditional_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.isEdit ? \"Updated\" : \"Save\", \" \");\n  }\n}\nexport let TransportFormComponent = /*#__PURE__*/(() => {\n  class TransportFormComponent {\n    constructor(route, router, toastr) {\n      this.route = route;\n      this.router = router;\n      this.toastr = toastr;\n      this.fb = inject(FormBuilder);\n      this.apiService = inject(ApiService);\n      this.authService = inject(AuthService);\n      this.transportForm = this.fb.group({\n        order_id: [0, Validators.required],\n        status: ['', Validators.required],\n        method: ['', Validators.required],\n        estimatedDelivery: ['']\n      });\n      this.isEdit = false;\n      this.isLoading = false;\n      this.transportMethods = ['ROAD', 'AIR', 'SEA'];\n      this.transportStatus = ['PREPARING', 'IN_TRANSIT', 'DELIVERED', 'CANCELLED', 'dharshan'];\n      this.orders$ = this.apiService.getOrders();\n    }\n    ngOnInit() {\n      this.route.params.subscribe(params => {\n        if (params['id']) {\n          this.isEdit = true;\n          this.transId = +params['id'];\n          console.log('transid', this.transId);\n          this.loadShipments(this.transId);\n        } else {\n          console.log('error');\n        }\n      });\n    }\n    loadShipments(id) {\n      this.isLoading = true;\n      this.apiService.getTransportId(id).subscribe({\n        next: shipment => {\n          this.transportForm.patchValue({\n            order_id: shipment.order.order_id,\n            method: shipment.method,\n            status: shipment.status,\n            estimatedDelivery: shipment.estimatedDelivery.toString().split('T')[0] || ''\n          });\n          this.isLoading = false;\n        },\n        error: err => {\n          this.toastr.error(err.error?.message || 'Faild to load shipments');\n          this.isLoading = false;\n        }\n      });\n    }\n    onSubmit() {\n      this.isLoading = true;\n      const formValue = this.transportForm.value;\n      console.log('FormValue', formValue.order_id);\n      this.orders$.subscribe(orders => {\n        console.log(\"before selected \", orders);\n        const selectedOrder = orders.find(order => order.order_id === +formValue.order_id);\n        console.log(\"selected \", selectedOrder?.order_id);\n        if (!selectedOrder) {\n          this.toastr.error('Selected order not found');\n          this.isLoading = false;\n          return;\n        }\n        const shipmentData = {\n          order: selectedOrder,\n          method: formValue.method ?? '',\n          estimatedDelivery: formValue.estimatedDelivery ?? ''\n        };\n        if (this.isEdit && this.transId) {\n          this.apiService.updateTransport(this.transId, shipmentData).subscribe({\n            next: () => {\n              this.toastr.success('Shipment updated Successfully');\n              this.router.navigate(['transport/shipments']);\n            },\n            error: err => {\n              this.toastr.error(err.error?.message || 'Failed to update Shipments');\n              this.isLoading = false;\n            }\n          });\n        } else {\n          this.apiService.createTransport(shipmentData).subscribe({\n            next: () => {\n              this.toastr.success('Shipment Created Successfully');\n              this.router.navigate(['transport/shipments']);\n            },\n            error: err => {\n              this.toastr.error(err.error?.message || 'Failed to Create Shipments');\n              this.isLoading = false;\n            }\n          });\n        }\n      });\n      if (this.transportForm.invalid) {\n        return;\n      }\n    }\n    logout() {\n      this.authService.logout();\n    }\n    static {\n      this.ɵfac = function TransportFormComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || TransportFormComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.ToastrService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TransportFormComponent,\n        selectors: [[\"app-transport-form\"]],\n        decls: 56,\n        vars: 16,\n        consts: [[1, \"navbar\", \"navbar-expand-lg\", \"navbar-dark\", \"bg-dark\"], [1, \"container\"], [\"routerLink\", \"/\", 1, \"navbar-brand\"], [\"id\", \"navbarNav\", 1, \"collapse\", \"navbar-collapse\"], [1, \"navbar-nav\"], [1, \"nav-item\"], [\"routerLink\", \"/transport/shipments\", 1, \"nav-link\", \"active\"], [\"routerLink\", \"/transport/shipments\", 1, \"nav-link\", \"text-white\"], [\"id\", \"navbar-item\", 1, \"navbar-nav\"], [1, \"nav-link\", \"btn-primary\", \"btn\", 3, \"click\"], [1, \"container\", \"mt-4\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"mb-3\"], [\"for\", \"order_id\", 1, \"form-label\"], [\"formControlName\", \"order_id\", \"id\", \"order_id\", 1, \"form-select\"], [\"value\", \"\"], [1, \"text-danger\"], [\"for\", \"method\", 1, \"form-label\"], [\"formControlName\", \"method\", \"id\", \"method\", 1, \"form-select\"], [3, \"value\"], [\"for\", \"status\", 1, \"form-label\"], [\"formControlName\", \"status\", \"id\", \"status\", 1, \"form-select\"], [\"for\", \"estimatedDelivery\", 1, \"form-label\"], [\"type\", \"date\", \"id\", \"estimatedDelivery\", \"formControlName\", \"estimatedDelivery\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-info\", \"me-2\", 3, \"disabled\"], [\"type\", \"button\", \"routerLink\", \"/transport/shipments\", 1, \"btn\", \"btn-danger\"]],\n        template: function TransportFormComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"a\", 2);\n            i0.ɵɵtext(3, \"Inventory Management\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"div\", 3)(5, \"ul\", 4)(6, \"li\", 5)(7, \"a\", 6);\n            i0.ɵɵtext(8, \"Home\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(9, \"li\", 5)(10, \"a\", 7);\n            i0.ɵɵtext(11, \"Shipments\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(12, \"ul\", 8)(13, \"li\", 5)(14, \"a\", 9);\n            i0.ɵɵlistener(\"click\", function TransportFormComponent_Template_a_click_14_listener() {\n              return ctx.logout();\n            });\n            i0.ɵɵtext(15, \"Logout\");\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(16, \"div\", 10)(17, \"h2\");\n            i0.ɵɵtext(18);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"form\", 11);\n            i0.ɵɵlistener(\"ngSubmit\", function TransportFormComponent_Template_form_ngSubmit_19_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(20, \"div\", 12)(21, \"label\", 13);\n            i0.ɵɵtext(22, \"Order\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(23, \"select\", 14)(24, \"option\", 15);\n            i0.ɵɵtext(25, \"Select an Order\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(26, TransportFormComponent_Conditional_26_Template, 2, 0);\n            i0.ɵɵpipe(27, \"async\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(28, TransportFormComponent_Conditional_28_Template, 2, 0, \"div\", 16);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(29, \"div\", 12)(30, \"label\", 17);\n            i0.ɵɵtext(31, \"Transport Method\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"select\", 18)(33, \"option\", 15);\n            i0.ɵɵtext(34, \"Select a Method\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵrepeaterCreate(35, TransportFormComponent_For_36_Template, 2, 2, \"option\", 19, i0.ɵɵrepeaterTrackByIdentity);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(37, TransportFormComponent_Conditional_37_Template, 2, 0, \"div\", 16);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(38, \"div\", 12)(39, \"label\", 20);\n            i0.ɵɵtext(40, \"Transport Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(41, \"select\", 21)(42, \"option\", 15);\n            i0.ɵɵtext(43, \"Select a Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵrepeaterCreate(44, TransportFormComponent_For_45_Template, 2, 2, \"option\", 19, i0.ɵɵrepeaterTrackByIdentity);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(46, TransportFormComponent_Conditional_46_Template, 2, 0, \"div\", 16);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(47, \"div\", 12)(48, \"label\", 22);\n            i0.ɵɵtext(49, \"EstimatedDelivery\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(50, \"input\", 23);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(51, \"button\", 24);\n            i0.ɵɵtemplate(52, TransportFormComponent_Conditional_52_Template, 1, 0, \"app-spinner\")(53, TransportFormComponent_Conditional_53_Template, 1, 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(54, \"button\", 25);\n            i0.ɵɵtext(55, \"Cancel\");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            let tmp_2_0;\n            let tmp_3_0;\n            let tmp_4_0;\n            let tmp_5_0;\n            let tmp_7_0;\n            let tmp_8_0;\n            let tmp_10_0;\n            i0.ɵɵadvance(18);\n            i0.ɵɵtextInterpolate1(\"\", ctx.isEdit ? \"Edit\" : \"Add\", \" Shipments\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"formGroup\", ctx.transportForm);\n            i0.ɵɵadvance(4);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_2_0 = ctx.transportForm.get(\"order_id\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.transportForm.get(\"order_id\")) == null ? null : tmp_2_0.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵconditional((tmp_3_0 = i0.ɵɵpipeBind1(27, 14, ctx.orders$)) ? 26 : -1, tmp_3_0);\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(((tmp_4_0 = ctx.transportForm.get(\"order_id\")) == null ? null : tmp_4_0.invalid) && ((tmp_4_0 = ctx.transportForm.get(\"order_id\")) == null ? null : tmp_4_0.touched) ? 28 : -1);\n            i0.ɵɵadvance(4);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_5_0 = ctx.transportForm.get(\"method\")) == null ? null : tmp_5_0.invalid) && ((tmp_5_0 = ctx.transportForm.get(\"method\")) == null ? null : tmp_5_0.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵrepeater(ctx.transportMethods);\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(((tmp_7_0 = ctx.transportForm.get(\"method\")) == null ? null : tmp_7_0.invalid) && ((tmp_7_0 = ctx.transportForm.get(\"method\")) == null ? null : tmp_7_0.touched) ? 37 : -1);\n            i0.ɵɵadvance(4);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_8_0 = ctx.transportForm.get(\"status\")) == null ? null : tmp_8_0.invalid) && ((tmp_8_0 = ctx.transportForm.get(\"status\")) == null ? null : tmp_8_0.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵrepeater(ctx.transportStatus);\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(((tmp_10_0 = ctx.transportForm.get(\"order_id\")) == null ? null : tmp_10_0.invalid) && ((tmp_10_0 = ctx.transportForm.get(\"order_id\")) == null ? null : tmp_10_0.touched) ? 46 : -1);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"disabled\", ctx.transportForm.invalid || ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵconditional(ctx.isLoading ? 52 : 53);\n          }\n        },\n        dependencies: [CommonModule, i3.AsyncPipe, ReactiveFormsModule, i4.ɵNgNoValidate, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, SpinnerComponent, RouterLink],\n        encapsulation: 2\n      });\n    }\n  }\n  return TransportFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}